#注意：修改配置后本地一定要clean一下，因为有缓存,
#并且注释不能写在连接参数中间，只能写在值后面(例如 hostname: localhost #123，不能写在 hostname上面，否则报错)

server:
  port: 8071


eureka:
  instance:
    hostname: localhost
  client:
    fetch-registry: false   # 此客户端是否获取eureka服务器注册表上的注册信息，默认为true
    register-with-eureka: false   # 实例是否在eureka服务器上注册自己的信息以供其他服务发现，默认为true
    service-url:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
      #注册中心高可用:创建多个注册中心地址,两两注册中心相互注册,即可同步注册信息
      #defaultZone: http://${eureka.instance.hostname}:8072/eureka/,http://${eureka.instance.hostname}:8073/eureka/

#服务注册以及心跳机制原理

#  Register：服务注册
#  当Eureka客户端向Eureka Server注册时，它提供自身的元数据，比如IP地址、端口，运行状况指示符URL，主页等。
#
#  Renew：服务续约
#  Eureka客户会每隔30秒发送一次心跳来续约。 通过续约来告知Eureka Server该Eureka客户仍然存在，没有出现问题。 正常情况下，如果Eureka Server在90秒没有收到Eureka客户的续约，它会将实例从其注册表中删除。 建议不要更改续约间隔。
#
#  Fetch Registries：获取注册列表信息
#  Eureka客户端从服务器获取注册表信息，并将其缓存在本地。客户端会使用该信息查找其他服务，从而进行远程调用。该注册列表信息定期（每30秒钟）更新一次。每次返回注册列表信息可能与Eureka客户端的缓存信息不同， Eureka客户端自动处理。如果由于某种原因导致注册列表信息不能及时匹配，Eureka客户端则会重新获取整个注册表信息。 Eureka服务器缓存注册列表信息，整个注册表以及每个应用程序的信息进行了压缩，压缩内容和没有压缩的内容完全相同。Eureka客户端和Eureka 服务器可以使用JSON / XML格式进行通讯。在默认的情况下Eureka客户端使用压缩JSON格式来获取注册列表的信息。
#
#  Cancel：服务下线
#  Eureka客户端在程序关闭时向Eureka服务器发送取消请求。 发送请求后，该客户端实例信息将从服务器的实例注册表中删除。该下线请求不会自动完成，它需要调用以下内容：
#  DiscoveryManager.getInstance().shutdownComponent()；
#
#  Eviction 服务剔除
#  在默认的情况下，当Eureka客户端连续90秒没有向Eureka服务器发送服务续约，即心跳，Eureka服务器会将该服务实例从服务注册列表删除，即服务剔除。
